/**
 * CreateTimelineDialog - Dialog for creating new timelines
 * Implements CC-REQ-CREATE-001 through CC-REQ-CREATE-007
 */

import { useState, useEffect, useMemo } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  Alert,
} from '@mui/material';
import { createTimeline, isTimelineIdUnique, generateSlugFromTitle, getCurrentUser } from '../lib/homePageStorage';

interface CreateTimelineDialogProps {
  open: boolean;
  onClose: () => void;
  onSuccess: (timelineId: string) => void;
}

export function CreateTimelineDialog({ open, onClose, onSuccess }: CreateTimelineDialogProps) {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [customId, setCustomId] = useState('');
  const [autoGeneratedId, setAutoGeneratedId] = useState('');
  const [isIdManuallyEdited, setIsIdManuallyEdited] = useState(false);
  const [titleError, setTitleError] = useState('');
  const [descriptionError, setDescriptionError] = useState('');
  const [idError, setIdError] = useState('');
  const [generalError, setGeneralError] = useState('');

  const currentUser = getCurrentUser();

  // Auto-generate ID from title (memoized to avoid recalculating on every keystroke)
  const autoGeneratedSlug = useMemo(() => {
    return title ? generateSlugFromTitle(title) : '';
  }, [title]);

  // Update autoGeneratedId and customId when slug changes
  useEffect(() => {
    setAutoGeneratedId(autoGeneratedSlug);
    // Only update customId if user hasn't manually edited it
    if (!isIdManuallyEdited) {
      setCustomId(autoGeneratedSlug);
    }
  }, [autoGeneratedSlug, isIdManuallyEdited]);

  // Validation functions (moved to functions instead of useEffect for better performance)
  const validateTitle = (value: string): string => {
    if (value.length > 0 && value.length < 3) {
      return 'Title must be at least 3 characters';
    } else if (value.length > 100) {
      return 'Title cannot exceed 100 characters';
    }
    return '';
  };

  const validateDescription = (value: string): string => {
    if (value.length > 500) {
      return 'Description cannot exceed 500 characters';
    }
    return '';
  };

  const validateCustomId = (value: string): string => {
    if (!value) return '';

    // Validate format (alphanumeric and hyphens only)
    const validFormat = /^[a-z0-9-]+$/.test(value);
    if (!validFormat) {
      return 'ID must contain only lowercase letters, numbers, and hyphens';
    }

    // Check uniqueness
    if (currentUser) {
      const fullId = `timeline-${value}`;
      if (!isTimelineIdUnique(fullId, currentUser.id)) {
        return 'This ID already exists for your account';
      }
    }

    return '';
  };

  // Run validation on blur instead of every keystroke
  const handleTitleBlur = () => {
    setTitleError(validateTitle(title));
  };

  const handleDescriptionBlur = () => {
    setDescriptionError(validateDescription(description));
  };

  const handleIdBlur = () => {
    setIdError(validateCustomId(customId));
  };

  const isFormValid =
    title.length >= 3 &&
    title.length <= 100 &&
    description.length <= 500 &&
    customId.length > 0 &&
    !titleError &&
    !descriptionError &&
    !idError;

  const handleCreate = () => {
    if (!currentUser) {
      setGeneralError('You must be logged in to create a timeline');
      return;
    }

    if (!isFormValid) {
      return;
    }

    try {
      const timeline = createTimeline(
        title,
        currentUser.id,
        description,
        customId
      );

      // Close dialog and notify parent
      handleClose();
      onSuccess(timeline.id);
    } catch (error) {
      setGeneralError(error instanceof Error ? error.message : 'Failed to create timeline');
    }
  };

  const handleClose = () => {
    // Reset form
    setTitle('');
    setDescription('');
    setCustomId('');
    setAutoGeneratedId('');
    setIsIdManuallyEdited(false);
    setTitleError('');
    setDescriptionError('');
    setIdError('');
    setGeneralError('');
    onClose();
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Escape') {
      handleClose();
    }
  };

  return (
    <Dialog
      open={open}
      onClose={handleClose}
      maxWidth="sm"
      fullWidth
      onKeyDown={handleKeyDown}
    >
      <DialogTitle>Create New Timeline</DialogTitle>
      <DialogContent>
        {generalError && (
          <Alert severity="error" sx={{ mb: 2 }}>
            {generalError}
          </Alert>
        )}

        <TextField
          autoFocus
          margin="dense"
          label="Title"
          fullWidth
          required
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          onBlur={handleTitleBlur}
          error={!!titleError}
          helperText={titleError || `${title.length}/100 characters`}
          sx={{ mb: 2 }}
        />

        <TextField
          margin="dense"
          label="Description"
          fullWidth
          multiline
          rows={3}
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          onBlur={handleDescriptionBlur}
          error={!!descriptionError}
          helperText={descriptionError || `${description.length}/500 characters`}
          sx={{ mb: 2 }}
        />

        <TextField
          margin="dense"
          label="Timeline ID"
          fullWidth
          required
          value={customId}
          onChange={(e) => {
            const newValue = e.target.value.toLowerCase();
            setCustomId(newValue);
            // Mark as manually edited if user types something different from auto-generated
            // Or reset the flag if field is cleared (allows auto-generation to resume)
            if (newValue === '' || newValue === autoGeneratedSlug) {
              setIsIdManuallyEdited(false);
            } else {
              setIsIdManuallyEdited(true);
            }
          }}
          onBlur={handleIdBlur}
          error={!!idError}
          helperText={
            idError ||
            `Auto-generated from title. Will be used in URL: /timeline/${customId || '...'}`
          }
          placeholder={autoGeneratedId}
          sx={{ mb: 1 }}
        />
      </DialogContent>
      <DialogActions>
        <Button onClick={handleClose}>Cancel</Button>
        <Button
          onClick={handleCreate}
          variant="contained"
          disabled={!isFormValid}
        >
          Create Timeline
        </Button>
      </DialogActions>
    </Dialog>
  );
}
