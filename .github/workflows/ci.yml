name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  quality-checks:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20"
        cache: "npm"

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run TypeScript type check
      run: npm run typecheck

    - name: Build project
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        retention-days: 7

  bundle-size-check:
    runs-on: ubuntu-latest
    needs: quality-checks

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20"
        cache: "npm"

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Check bundle size
      run: |
        echo "📦 Analyzing bundle sizes (gzipped - as served to users)..."
        echo ""

        # Calculate gzipped JavaScript size
        JS_SIZE=$(find dist/assets -name "*.js" -type f -exec gzip -c {} \; | wc -c)
        JS_SIZE_KB=$((JS_SIZE / 1024))

        # Calculate gzipped CSS size
        CSS_SIZE=$(find dist/assets -name "*.css" -type f -exec gzip -c {} \; | wc -c)
        CSS_SIZE_KB=$((CSS_SIZE / 1024))

        # Calculate image sizes (already compressed, served as-is)
        IMAGE_SIZE=$(find dist -type f \( -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.svg" -o -name "*.webp" \) -exec stat -f%z {} \; 2>/dev/null | awk '{s+=$1} END {print s}' || find dist -type f \( -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.svg" -o -name "*.webp" \) -exec stat -c%s {} \; | awk '{s+=$1} END {print s}')
        IMAGE_SIZE_KB=$((IMAGE_SIZE / 1024))

        # Total transfer size (what users actually download)
        TOTAL_TRANSFER=$((JS_SIZE + CSS_SIZE + IMAGE_SIZE))
        TOTAL_TRANSFER_KB=$((TOTAL_TRANSFER / 1024))

        echo "JavaScript (gzipped):  ${JS_SIZE_KB} KB"
        echo "CSS (gzipped):         ${CSS_SIZE_KB} KB"
        echo "Images:                ${IMAGE_SIZE_KB} KB"
        echo "─────────────────────────────────────"
        echo "Total transfer size:   ${TOTAL_TRANSFER_KB} KB"
        echo ""

        # Set limits based on industry standards for React + MUI apps
        MAX_JS=400000      # 400 KB gzipped JS (generous for MUI + React)
        MAX_CSS=50000      # 50 KB gzipped CSS
        MAX_IMAGES=1200000 # 1.2 MB total images
        MAX_TOTAL=1500000  # 1.5 MB total transfer

        FAILED=0

        if [ $JS_SIZE -gt $MAX_JS ]; then
          echo "❌ JavaScript bundle exceeds limit: ${JS_SIZE_KB} KB > $((MAX_JS / 1024)) KB"
          FAILED=1
        else
          echo "✅ JavaScript bundle within limit: ${JS_SIZE_KB} KB <= $((MAX_JS / 1024)) KB"
        fi

        if [ $CSS_SIZE -gt $MAX_CSS ]; then
          echo "❌ CSS bundle exceeds limit: ${CSS_SIZE_KB} KB > $((MAX_CSS / 1024)) KB"
          FAILED=1
        else
          echo "✅ CSS bundle within limit: ${CSS_SIZE_KB} KB <= $((MAX_CSS / 1024)) KB"
        fi

        if [ $IMAGE_SIZE -gt $MAX_IMAGES ]; then
          echo "❌ Images exceed limit: ${IMAGE_SIZE_KB} KB > $((MAX_IMAGES / 1024)) KB"
          FAILED=1
        else
          echo "✅ Images within limit: ${IMAGE_SIZE_KB} KB <= $((MAX_IMAGES / 1024)) KB"
        fi

        if [ $TOTAL_TRANSFER -gt $MAX_TOTAL ]; then
          echo "❌ Total transfer size exceeds limit: ${TOTAL_TRANSFER_KB} KB > $((MAX_TOTAL / 1024)) KB"
          FAILED=1
        else
          echo "✅ Total transfer size within limit: ${TOTAL_TRANSFER_KB} KB <= $((MAX_TOTAL / 1024)) KB"
        fi

        if [ $FAILED -eq 1 ]; then
          echo ""
          echo "❌ Bundle size check failed!"
          exit 1
        else
          echo ""
          echo "✅ All bundle size checks passed!"
        fi

  test-foundation:
    runs-on: ubuntu-latest
    needs: quality-checks

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20"
        cache: "npm"

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Run foundation tests
      run: |
        npx playwright test \
          tests/v5/01-foundation.smoke.spec.ts \
          --timeout=30000

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test-results/
        retention-days: 7
